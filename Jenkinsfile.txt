pipeline {
    agent any 

    environment {
        DOCKER_CREDENTIALS_ID = 'roseaw-dockerhub'  
        DOCKER_IMAGE = 'cithit/wanes'   // Change this to your MiamiID!
        IMAGE_TAG = "build-${BUILD_NUMBER}"
        GITHUB_URL = 'https://github.com/safi963/https-github.com-miamioh-cit-225-lab4-2.git'   // Change this to match your repository!
        KUBECONFIG = credentials('wanes-225')   // Change this to match your Kubernetes credentials (MiamiID-225)! 
    }

    stages {
        stage('Code Checkout') {
            steps {
                cleanWs()
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: "${GITHUB_URL}"]]])
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    // Run static code analysis using pylint or flake8
                    sh 'pylint *.py || true'  // Example command for pylint
                    // Add similar commands for other static analysis tools if needed
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${IMAGE_TAG}", "-f Dockerfile.build .")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE}:${IMAGE_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy to Dev Environment') {
            steps {
                script {
                    // Deployment to development environment (DEV)
                    def kubeConfig = readFile(KUBECONFIG)
                    sh "kubectl apply -f deployment-dev.yaml"
                }
            }
        }

        stage('Generate Test Data') {
            steps {
                script {
                    // Add steps to generate test data if needed
                }
            }
        }

        stage("Run Acceptance Tests") {
            steps {
                script {
                    // Add or modify steps to run acceptance tests
                    sh 'docker stop qa-tests || true'
                    sh 'docker rm qa-tests || true'
                    sh 'docker build -t qa-tests -f Dockerfile.test .'
                    sh 'docker run qa-tests'
                }
            }
        }
        
        stage('Remove Test Data') {
            steps {
                script {
                    // Add or modify steps to remove test data
                    def appPod = sh(script: "kubectl get pods -l app=flask -o jsonpath='{.items[0].metadata.name}'", returnStdout: true).trim()
                    sh "kubectl exec ${appPod} -- python


